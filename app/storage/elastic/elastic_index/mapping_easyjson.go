// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elastic_index

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD80f854cDecodeOtusRecipeAppStorageElasticElasticIndex(in *jlexer.Lexer, out *Mapping) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "settings":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Settings = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Settings)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "mappings":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Mappings = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					(out.Mappings)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD80f854cEncodeOtusRecipeAppStorageElasticElasticIndex(out *jwriter.Writer, in Mapping) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"settings\":"
		out.RawString(prefix[1:])
		if in.Settings == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Settings {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if m, ok := v3Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v3Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v3Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"mappings\":"
		out.RawString(prefix)
		if in.Mappings == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Mappings {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if m, ok := v4Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v4Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v4Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mapping) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD80f854cEncodeOtusRecipeAppStorageElasticElasticIndex(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mapping) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD80f854cEncodeOtusRecipeAppStorageElasticElasticIndex(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mapping) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD80f854cDecodeOtusRecipeAppStorageElasticElasticIndex(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mapping) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD80f854cDecodeOtusRecipeAppStorageElasticElasticIndex(l, v)
}
