// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package responses

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson18ce5a0fDecodeOtusRecipeAppApiResponses(in *jlexer.Lexer, out *RecipeListOkResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]RecipeGetOkResponse, 0, 0)
					} else {
						out.Items = []RecipeGetOkResponse{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 RecipeGetOkResponse
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page":
			out.Page = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		case "pages":
			out.Pages = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson18ce5a0fEncodeOtusRecipeAppApiResponses(out *jwriter.Writer, in RecipeListOkResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int64(int64(in.Page))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int64(int64(in.Pages))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RecipeListOkResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson18ce5a0fEncodeOtusRecipeAppApiResponses(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecipeListOkResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson18ce5a0fEncodeOtusRecipeAppApiResponses(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecipeListOkResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson18ce5a0fDecodeOtusRecipeAppApiResponses(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecipeListOkResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson18ce5a0fDecodeOtusRecipeAppApiResponses(l, v)
}
